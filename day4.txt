
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects'
import { DataService } from 'src/app/Service/data.service';
import { getMovies, getMoviesSuccess } from '../Actions/movie.actions';
import { exhaustMap, map } from 'rxjs/operators';

@Injectable()
export class MovieEffects {
    loadMovies$ = createEffect(() =>
        this.action$.pipe(
            ofType(getMovies),
            exhaustMap(() =>
                this.dataService.getMovies().pipe(
                    map((movies) => getMoviesSuccess(movies))
                )
            )
        )


    )
    constructor(private action$: Actions, private dataService: DataService) { }
}
---


import { createAction } from '@ngrx/store'
import { Movie } from 'src/app/Models/movie'

export const getMovies = createAction('[Movie] Get Movies Called....!')

export const getMoviesSuccess = createAction('loading movies from services',
    (movies: ReadonlyArray<Movie>) => ({ movies })
)

export const addMovies = createAction('[Movie Added] new Movie added...!',
    (movie: Movie) => ({movie})
)


export const addMovieSucess = createAction('movie added successfully', (movie: Movie) => ({ movie }))


------------------

import { createReducer, on } from "@ngrx/store";
import { Movie } from "src/app/Models/movie";
import { addMovies, getMovies, getMoviesSuccess } from "../Actions/movie.actions";


export interface MovieState {
    movies: ReadonlyArray<Movie>
}

const initialState: ReadonlyArray<Movie> = []

export const movieReducer = createReducer(
    initialState,
    on(getMoviesSuccess, (state,{movies}) => [...movies]),
   
)

